/*
 * This file is generated by jOOQ.
 */
package com.hosu.emailbatch.generated.tables;


import com.hosu.emailbatch.generated.Emailbatch;
import com.hosu.emailbatch.generated.Keys;
import com.hosu.emailbatch.generated.tables.records.AppMessageRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AppMessage extends TableImpl<AppMessageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>emailbatch.APP_MESSAGE</code>
     */
    public static final AppMessage APP_MESSAGE = new AppMessage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppMessageRecord> getRecordType() {
        return AppMessageRecord.class;
    }

    /**
     * The column <code>emailbatch.APP_MESSAGE.id</code>.
     */
    public final TableField<AppMessageRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>emailbatch.APP_MESSAGE.customer_id</code>.
     */
    public final TableField<AppMessageRecord, Long> CUSTOMER_ID = createField(DSL.name("customer_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>emailbatch.APP_MESSAGE.template_id</code>.
     */
    public final TableField<AppMessageRecord, Long> TEMPLATE_ID = createField(DSL.name("template_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>emailbatch.APP_MESSAGE.value1</code>.
     */
    public final TableField<AppMessageRecord, String> VALUE1 = createField(DSL.name("value1"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>emailbatch.APP_MESSAGE.value2</code>.
     */
    public final TableField<AppMessageRecord, String> VALUE2 = createField(DSL.name("value2"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>emailbatch.APP_MESSAGE.value3</code>.
     */
    public final TableField<AppMessageRecord, String> VALUE3 = createField(DSL.name("value3"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>emailbatch.APP_MESSAGE.value4</code>.
     */
    public final TableField<AppMessageRecord, String> VALUE4 = createField(DSL.name("value4"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>emailbatch.APP_MESSAGE.value5</code>.
     */
    public final TableField<AppMessageRecord, String> VALUE5 = createField(DSL.name("value5"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>emailbatch.APP_MESSAGE.value6</code>.
     */
    public final TableField<AppMessageRecord, String> VALUE6 = createField(DSL.name("value6"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>emailbatch.APP_MESSAGE.value7</code>.
     */
    public final TableField<AppMessageRecord, String> VALUE7 = createField(DSL.name("value7"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>emailbatch.APP_MESSAGE.value8</code>.
     */
    public final TableField<AppMessageRecord, String> VALUE8 = createField(DSL.name("value8"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>emailbatch.APP_MESSAGE.value9</code>.
     */
    public final TableField<AppMessageRecord, String> VALUE9 = createField(DSL.name("value9"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>emailbatch.APP_MESSAGE.value10</code>.
     */
    public final TableField<AppMessageRecord, String> VALUE10 = createField(DSL.name("value10"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>emailbatch.APP_MESSAGE.send_date</code>.
     */
    public final TableField<AppMessageRecord, LocalDate> SEND_DATE = createField(DSL.name("send_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>emailbatch.APP_MESSAGE.status</code>.
     */
    public final TableField<AppMessageRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>emailbatch.APP_MESSAGE.created_at</code>.
     */
    public final TableField<AppMessageRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>emailbatch.APP_MESSAGE.updated_at</code>.
     */
    public final TableField<AppMessageRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private AppMessage(Name alias, Table<AppMessageRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AppMessage(Name alias, Table<AppMessageRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>emailbatch.APP_MESSAGE</code> table reference
     */
    public AppMessage(String alias) {
        this(DSL.name(alias), APP_MESSAGE);
    }

    /**
     * Create an aliased <code>emailbatch.APP_MESSAGE</code> table reference
     */
    public AppMessage(Name alias) {
        this(alias, APP_MESSAGE);
    }

    /**
     * Create a <code>emailbatch.APP_MESSAGE</code> table reference
     */
    public AppMessage() {
        this(DSL.name("APP_MESSAGE"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Emailbatch.EMAILBATCH;
    }

    @Override
    public Identity<AppMessageRecord, Long> getIdentity() {
        return (Identity<AppMessageRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AppMessageRecord> getPrimaryKey() {
        return Keys.KEY_APP_MESSAGE_PRIMARY;
    }

    @Override
    public AppMessage as(String alias) {
        return new AppMessage(DSL.name(alias), this);
    }

    @Override
    public AppMessage as(Name alias) {
        return new AppMessage(alias, this);
    }

    @Override
    public AppMessage as(Table<?> alias) {
        return new AppMessage(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AppMessage rename(String name) {
        return new AppMessage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AppMessage rename(Name name) {
        return new AppMessage(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AppMessage rename(Table<?> name) {
        return new AppMessage(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AppMessage where(Condition condition) {
        return new AppMessage(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AppMessage where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AppMessage where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AppMessage where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AppMessage where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AppMessage where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AppMessage where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AppMessage where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AppMessage whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AppMessage whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
