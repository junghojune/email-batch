/*
 * This file is generated by jOOQ.
 */
package com.hosu.emailbatch.generated;


import com.hosu.emailbatch.generated.tables.AppMessage;
import com.hosu.emailbatch.generated.tables.Customer;
import com.hosu.emailbatch.generated.tables.CustomerComm;
import com.hosu.emailbatch.generated.tables.WeatherData;
import com.hosu.emailbatch.generated.tables.records.AppMessageRecord;
import com.hosu.emailbatch.generated.tables.records.CustomerCommRecord;
import com.hosu.emailbatch.generated.tables.records.CustomerRecord;
import com.hosu.emailbatch.generated.tables.records.WeatherDataRecord;

import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * emailbatch.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AppMessageRecord> KEY_APP_MESSAGE_PRIMARY = Internal.createUniqueKey(AppMessage.APP_MESSAGE, DSL.name("KEY_APP_MESSAGE_PRIMARY"), new TableField[] { AppMessage.APP_MESSAGE.ID }, true);
    public static final UniqueKey<CustomerRecord> KEY_CUSTOMER_PRIMARY = Internal.createUniqueKey(Customer.CUSTOMER, DSL.name("KEY_CUSTOMER_PRIMARY"), new TableField[] { Customer.CUSTOMER.ID }, true);
    public static final UniqueKey<CustomerCommRecord> KEY_CUSTOMER_COMM_CUSTOMER_ID = Internal.createUniqueKey(CustomerComm.CUSTOMER_COMM, DSL.name("KEY_CUSTOMER_COMM_customer_id"), new TableField[] { CustomerComm.CUSTOMER_COMM.CUSTOMER_ID, CustomerComm.CUSTOMER_COMM.TYPE }, true);
    public static final UniqueKey<CustomerCommRecord> KEY_CUSTOMER_COMM_PRIMARY = Internal.createUniqueKey(CustomerComm.CUSTOMER_COMM, DSL.name("KEY_CUSTOMER_COMM_PRIMARY"), new TableField[] { CustomerComm.CUSTOMER_COMM.ID }, true);
    public static final UniqueKey<WeatherDataRecord> KEY_WEATHER_DATA_LOCATION = Internal.createUniqueKey(WeatherData.WEATHER_DATA, DSL.name("KEY_WEATHER_DATA_location"), new TableField[] { WeatherData.WEATHER_DATA.LOCATION, WeatherData.WEATHER_DATA.DATE }, true);
    public static final UniqueKey<WeatherDataRecord> KEY_WEATHER_DATA_PRIMARY = Internal.createUniqueKey(WeatherData.WEATHER_DATA, DSL.name("KEY_WEATHER_DATA_PRIMARY"), new TableField[] { WeatherData.WEATHER_DATA.ID }, true);
}
